/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: transaction.proto */

#ifndef PROTOBUF_C_transaction_2eproto__INCLUDED
#define PROTOBUF_C_transaction_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Transaction Transaction;
typedef struct IpcMessage IpcMessage;


/* --- enums --- */

typedef enum _IpcMessage__Status {
  IPC_MESSAGE__STATUS__TEST = 0,
  IPC_MESSAGE__STATUS__OK = 1,
  IPC_MESSAGE__STATUS__ERROR = 2,
  IPC_MESSAGE__STATUS__FINISH = 3,
  IPC_MESSAGE__STATUS__WAIT = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPC_MESSAGE__STATUS)
} IpcMessage__Status;

/* --- messages --- */

struct  Transaction
{
  ProtobufCMessage base;
  ProtobufCBinaryData transaction;
  ProtobufCBinaryData pubkey;
  char *date;
};
#define TRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&transaction__descriptor) \
    , {0,NULL}, {0,NULL}, NULL }


struct  IpcMessage
{
  ProtobufCMessage base;
  IpcMessage__Status status_code;
  Transaction *data;
};
#define IPC_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ipc_message__descriptor) \
    , IPC_MESSAGE__STATUS__TEST, NULL }


/* Transaction methods */
void   transaction__init
                     (Transaction         *message);
size_t transaction__get_packed_size
                     (const Transaction   *message);
size_t transaction__pack
                     (const Transaction   *message,
                      uint8_t             *out);
size_t transaction__pack_to_buffer
                     (const Transaction   *message,
                      ProtobufCBuffer     *buffer);
Transaction *
       transaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   transaction__free_unpacked
                     (Transaction *message,
                      ProtobufCAllocator *allocator);
/* IpcMessage methods */
void   ipc_message__init
                     (IpcMessage         *message);
size_t ipc_message__get_packed_size
                     (const IpcMessage   *message);
size_t ipc_message__pack
                     (const IpcMessage   *message,
                      uint8_t             *out);
size_t ipc_message__pack_to_buffer
                     (const IpcMessage   *message,
                      ProtobufCBuffer     *buffer);
IpcMessage *
       ipc_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ipc_message__free_unpacked
                     (IpcMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Transaction_Closure)
                 (const Transaction *message,
                  void *closure_data);
typedef void (*IpcMessage_Closure)
                 (const IpcMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor transaction__descriptor;
extern const ProtobufCMessageDescriptor ipc_message__descriptor;
extern const ProtobufCEnumDescriptor    ipc_message__status__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_transaction_2eproto__INCLUDED */
